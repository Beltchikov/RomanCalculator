@page "/"
@rendermode InteractiveServer

@page "/roman-calculator"
@using System.Text.RegularExpressions
@using System.Text


<PageTitle>Römischer Taschenrechner</PageTitle>

<div class="max-w-xl mx-auto mt-10 p-6 bg-white shadow-md rounded-xl space-y-6">
    <h1 class="text-3xl font-bold text-center text-gray-800">Römischer Taschenrechner</h1>

    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 items-center">
        <label class="text-right font-medium text-gray-700">Operand A:</label>
        <input class="border border-gray-300 rounded-lg p-2 w-full focus:outline-none focus:ring focus:border-blue-500"
               @bind="InputA" placeholder="z.B. X oder 10" />

        <label class="text-right font-medium text-gray-700">Operator:</label>
        <select class="border border-gray-300 rounded-lg p-2 w-full focus:outline-none focus:ring focus:border-blue-500"
                @bind="Operator">
            <option value="+">Addition (+)</option>
            <option value="-">Subtraktion (-)</option>
        </select>

        <label class="text-right font-medium text-gray-700">Operand B:</label>
        <input class="border border-gray-300 rounded-lg p-2 w-full focus:outline-none focus:ring focus:border-blue-500"
               @bind="InputB" placeholder="z.B. V oder 5" />
    </div>

    <div class="flex justify-center">
        <button class="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-6 py-2 rounded-lg shadow transition duration-200"
                @onclick="Calculate">
            ➕ Berechnen
        </button>
    </div>

    @if (Result != null)
    {
        <div class="bg-gray-50 p-4 rounded-lg text-center shadow">
            <div class="text-gray-600 text-sm font-semibold">Ergebnis</div>
            <div class="mt-2 text-xl text-gray-900 font-bold">Arabisch: @Result</div>
            <div class="text-xl text-gray-900 font-bold">Römisch: @RomanResult</div>
        </div>
    }

    @if (!string.IsNullOrEmpty(Error))
    {
        <div class="text-red-600 text-center font-semibold">@Error</div>
    }
</div>

@code {
    private string InputA = string.Empty;
    private string InputB = string.Empty;
    private string Operator = "+";
    private int? Result;
    private string RomanResult = string.Empty;
    private string Error = string.Empty;

    private void Calculate()
    {
        Error = string.Empty;
        try
        {
            int a = ParseInput(InputA);
            int b = ParseInput(InputB);

            Result = Operator switch
            {
                "+" => a + b,
                "-" => a - b,
                _ => throw new InvalidOperationException("Unbekannter Operator")
            };

            if (Result < 0 || Result > 1000)
            {
                RomanResult = "-";
                Error = "Ergebnis außerhalb des unterstützten Bereichs (0 - 1000).";
            }
            else if (Result == 0)
            {
                RomanResult = "N";
            }
            else
            {
                RomanResult = ToRoman(Result.Value);
            }
        }
        catch (Exception ex)
        {
            Result = null;
            RomanResult = string.Empty;
            Error = ex.Message;
        }
    }

    private int ParseInput(string input)
    {
        input = input?.Trim().ToUpperInvariant() ?? throw new ArgumentException("Ungültige Eingabe.");
        if (string.IsNullOrEmpty(input)) throw new ArgumentException("Eingabe darf nicht leer sein.");

        if (Regex.IsMatch(input, "^[0-9]+$")) return int.Parse(input);
        if (input == "N") return 0;

        return RomanToArabic(input);
    }

    private int RomanToArabic(string roman)
    {
        var romanMap = new Dictionary<char, int>
        {
            {'I', 1}, {'V', 5}, {'X', 10},
            {'L', 50}, {'C', 100}, {'D', 500}, {'M', 1000}
        };

        int total = 0, prev = 0;
        foreach (var c in roman.Reverse())
        {
            if (!romanMap.TryGetValue(c, out int val))
                throw new ArgumentException($"Ungültiges römisches Zeichen: {c}");

            if (val < prev)
                total -= val;
            else
            {
                total += val;
                prev = val;
            }
        }
        return total;
    }

    private string ToRoman(int number)
    {
        var map = new (int, string)[]
        {
            (1000, "M"), (900, "CM"), (500, "D"), (400, "CD"),
            (100, "C"), (90, "XC"), (50, "L"), (40, "XL"),
            (10, "X"), (9, "IX"), (5, "V"), (4, "IV"), (1, "I")
        };

        var result = new StringBuilder();
        foreach (var (val, sym) in map)
        {
            while (number >= val)
            {
                result.Append(sym);
                number -= val;
            }
        }
        return result.ToString();
    }
}
