@page "/"
@rendermode InteractiveServer

@page "/roman-calculator"
@using System.Text.RegularExpressions
@using System.Text

<!-- Hauptcontainer: zentriert mit 400px Breite, um 100px nach links verschoben -->
<div style="margin: 0 auto; width: 400px; transform: translateX(-100px);">

    <!-- Überschrift und Trennlinie -->
    <br />
    <h1 class="text-3xl font-bold text-center text-gray-800">Römischer Taschenrechner</h1>
    <hr />

    <!-- Eingabefeld-Tabelle: 3 Zeilen, 2 Spalten -->
    <table class="table-auto w-full">
        <tbody>
            <!-- Operand A -->
            <tr class="align-middle">
                <td class="pr-4 text-right font-medium text-gray-700 w-1/3">
                    <label for="inputA">Operand A:</label>
                </td>
                <td class="w-full min-w-0">
                    <input id="inputA"
                           style="width:100px"
                           @ref="inputARef"
                           @bind="InputA"
                           placeholder="z.B. X oder 10" />
                </td>
            </tr>

            <!-- Operator (Addition/Subtraktion) -->
            <tr class="align-middle">
                <td class="pr-4 text-right font-medium text-gray-700 w-1/3">
                    <label for="operator">Operator:</label>
                </td>
                <td class="w-full min-w-0">
                    <select id="operator"
                            class="border border-gray-300 rounded-lg p-2 w-full focus:outline-none focus:ring focus:border-blue-500"
                            @bind="Operator">
                        <option value="+">Addition (+)</option>
                        <option value="-">Subtraktion (-)</option>
                    </select>
                </td>
            </tr>

            <!-- Operand B -->
            <tr class="align-middle">
                <td class="pr-4 text-right font-medium text-gray-700 w-1/3">
                    <label for="inputB">Operand B:</label>
                </td>
                <td class="w-full min-w-0">
                    <input id="inputB"
                           style="width:100px"
                           @bind="InputB"
                           placeholder="z.B. V oder 5" />
                </td>
            </tr>
        </tbody>
    </table>

    <br />
    <hr />

    <!-- Berechnen-Button -->
    <div class="flex justify-center">
        <button class="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-6 py-2 rounded-lg shadow transition duration-200"
                @onclick="Calculate">
            Berechnen
        </button>
    </div>

    <hr />

    <!-- Ergebnisanzeige -->
    @if (Result != null)
    {
        <div class="bg-gray-50 p-4 rounded-lg text-center shadow">
            <div class="text-gray-600 text-sm font-semibold">Ergebnis</div>
            <div class="mt-2 text-xl text-gray-900 font-bold">Arabisch: @Result</div>
            <div class="text-xl text-gray-900 font-bold">Römisch: @RomanResult</div>
        </div>
    }

    <!-- Fehlermeldung -->
    @if (!string.IsNullOrEmpty(Error))
    {
        <div class="text-red-600 text-center font-semibold">@Error</div>
    }
</div>


@code {
    // Für Fokussierung per JS
    private ElementReference inputARef;

    [Inject]
    private IJSRuntime JS { get; set; } = default!;

    // Eingabewerte
    private string InputA = string.Empty;
    private string InputB = string.Empty;
    private string Operator = "+";

    // Ergebnisfelder
    private int? Result;
    private string RomanResult = string.Empty;
    private string Error = string.Empty;

    // AfterRender Händler wird überschrieben für initialen Fokus
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("focusElement", inputARef);
        }
    }


    // Hauptlogik: Berechnung ausführen
    private void Calculate()
    {
        Error = string.Empty;
        try
        {
            int a = ParseInput(InputA);
            int b = ParseInput(InputB);

            // Rechenoperation basierend auf Operator
            Result = Operator switch
            {
                "+" => a + b,
                "-" => a - b,
                _ => throw new InvalidOperationException("Unbekannter Operator")
            };

            // Ergebnisvalidierung
            if (Result < 0 || Result > 1000)
            {
                RomanResult = "-";
                Error = "Ergebnis außerhalb des unterstützten Bereichs (0 - 1000).";
            }
            else if (Result == 0)
            {
                RomanResult = "N";
            }
            else
            {
                RomanResult = ToRoman(Result.Value);
            }
        }
        catch (Exception ex)
        {
            Result = null;
            RomanResult = string.Empty;
            Error = ex.Message;
        }
    }

    // Konvertiere Eingabe: arabisch oder römisch nach int
    private int ParseInput(string input)
    {
        input = input?.Trim().ToUpperInvariant() ?? throw new ArgumentException("Ungültige Eingabe.");
        if (string.IsNullOrEmpty(input)) throw new ArgumentException("Eingabe darf nicht leer sein.");

        if (Regex.IsMatch(input, "^[0-9]+$")) return int.Parse(input);
        if (input == "N") return 0;

        return RomanToArabic(input);
    }

    // Wandelt römische Zahl nach int um
    private int RomanToArabic(string roman)
    {
        var romanMap = new Dictionary<char, int>
        {
            {'I', 1}, {'V', 5}, {'X', 10},
            {'L', 50}, {'C', 100}, {'D', 500}, {'M', 1000}
        };

        int total = 0, prev = 0;
        foreach (var c in roman.Reverse())
        {
            if (!romanMap.TryGetValue(c, out int val))
                throw new ArgumentException($"Ungültiges römisches Zeichen: {c}");

            if (val < prev)
                total -= val;
            else
            {
                total += val;
                prev = val;
            }
        }
        return total;
    }

    // Wandelt Zahl (int) in römische Schreibweise um
    private string ToRoman(int number)
    {
        var map = new (int, string)[]
        {
            (1000, "M"), (900, "CM"), (500, "D"), (400, "CD"),
            (100, "C"), (90, "XC"), (50, "L"), (40, "XL"),
            (10, "X"), (9, "IX"), (5, "V"), (4, "IV"), (1, "I")
        };

        var result = new StringBuilder();
        foreach (var (val, sym) in map)
        {
            while (number >= val)
            {
                result.Append(sym);
                number -= val;
            }
        }
        return result.ToString();
    }
}

